<<<<<<< HEAD
import { Container, ContainerIterator } from "../../ContainerBase";
export declare abstract class HashContainerIterator<K, V> extends ContainerIterator<K | [K, V]> {
    pre(): this;
    next(): this;
}
export declare abstract class HashContainer<K, V> extends Container<K | [K, V]> {
    /**
     * @description Unique symbol used to tag object.
     */
    readonly HASH_TAG: symbol;
    clear(): void;
    /**
     * @description Remove the element of the specified key.
     * @param key - The key you want to remove.
     * @param isObject - Tell us if the type of inserted key is `object` to improve efficiency.<br/>
     *                   If a `undefined` value is passed in, the type will be automatically judged.
     * @returns Whether erase successfully.
     */
    eraseElementByKey(key: K, isObject?: boolean): boolean;
    eraseElementByIterator(iter: HashContainerIterator<K, V>): HashContainerIterator<K, V>;
    eraseElementByPos(pos: number): number;
}
=======
import { Base } from "../../ContainerBase";
declare abstract class HashContainer<K> extends Base {
    protected constructor(initBucketNum?: number, hashFunc?: (x: K) => number);
    clear(): void;
    /**
     * @description Iterate over all elements in the container.
     * @param callback Callback function like Array.forEach.
     */
    abstract forEach(callback: (element: unknown, index: number) => void): void;
    /**
     * @description Remove the elements of the specified value.
     * @param key The element you want to remove.
     */
    abstract eraseElementByKey(key: K): void;
    /**
     * @param key The element you want to find.
     * @return Boolean about if the specified element in the hash set.
     */
    abstract find(key: K): void;
    /**
     * @description Using for `for...of` syntax like Array.
     */
    abstract [Symbol.iterator](): Generator<K | [K, unknown], void, undefined>;
}
export default HashContainer;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
