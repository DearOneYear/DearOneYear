var __extends = this && this.t || function() {
<<<<<<< HEAD
    var extendStatics = function(t, i) {
        extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(t, i) {
            t.__proto__ = i;
        } || function(t, i) {
            for (var r in i) if (Object.prototype.hasOwnProperty.call(i, r)) t[r] = i[r];
        };
        return extendStatics(t, i);
    };
    return function(t, i) {
        if (typeof i !== "function" && i !== null) throw new TypeError("Class extends value " + String(i) + " is not a constructor or null");
        extendStatics(t, i);
        function __() {
            this.constructor = t;
        }
        t.prototype = i === null ? Object.create(i) : (__.prototype = i.prototype, new __);
    };
}();

var __generator = this && this.u || function(t, i) {
    var r = {
        label: 0,
        sent: function() {
            if (e[0] & 1) throw e[1];
            return e[1];
        },
        trys: [],
        ops: []
    }, n, s, e, h;
=======
    var extendStatics = function(i, t) {
        extendStatics = Object.setPrototypeOf || {
            __proto__: []
        } instanceof Array && function(i, t) {
            i.__proto__ = t;
        } || function(i, t) {
            for (var n in t) if (Object.prototype.hasOwnProperty.call(t, n)) i[n] = t[n];
        };
        return extendStatics(i, t);
    };
    return function(i, t) {
        if (typeof t !== "function" && t !== null) throw new TypeError("Class extends value " + String(t) + " is not a constructor or null");
        extendStatics(i, t);
        function __() {
            this.constructor = i;
        }
        i.prototype = t === null ? Object.create(t) : (__.prototype = t.prototype, new __);
    };
}();

var __generator = this && this.i || function(i, t) {
    var n = {
        label: 0,
        sent: function() {
            if (s[0] & 1) throw s[1];
            return s[1];
        },
        trys: [],
        ops: []
    }, r, e, s, h;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    return h = {
        next: verb(0),
        throw: verb(1),
        return: verb(2)
    }, typeof Symbol === "function" && (h[Symbol.iterator] = function() {
        return this;
    }), h;
<<<<<<< HEAD
    function verb(t) {
        return function(i) {
            return step([ t, i ]);
        };
    }
    function step(h) {
        if (n) throw new TypeError("Generator is already executing.");
        while (r) try {
            if (n = 1, s && (e = h[0] & 2 ? s["return"] : h[0] ? s["throw"] || ((e = s["return"]) && e.call(s), 
            0) : s.next) && !(e = e.call(s, h[1])).done) return e;
            if (s = 0, e) h = [ h[0] & 2, e.value ];
            switch (h[0]) {
              case 0:
              case 1:
                e = h;
                break;

              case 4:
                r.label++;
=======
    function verb(i) {
        return function(t) {
            return step([ i, t ]);
        };
    }
    function step(h) {
        if (r) throw new TypeError("Generator is already executing.");
        while (n) try {
            if (r = 1, e && (s = h[0] & 2 ? e["return"] : h[0] ? e["throw"] || ((s = e["return"]) && s.call(e), 
            0) : e.next) && !(s = s.call(e, h[1])).done) return s;
            if (e = 0, s) h = [ h[0] & 2, s.value ];
            switch (h[0]) {
              case 0:
              case 1:
                s = h;
                break;

              case 4:
                n.label++;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
                return {
                    value: h[1],
                    done: false
                };

              case 5:
<<<<<<< HEAD
                r.label++;
                s = h[1];
=======
                n.label++;
                e = h[1];
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
                h = [ 0 ];
                continue;

              case 7:
<<<<<<< HEAD
                h = r.ops.pop();
                r.trys.pop();
                continue;

              default:
                if (!(e = r.trys, e = e.length > 0 && e[e.length - 1]) && (h[0] === 6 || h[0] === 2)) {
                    r = 0;
                    continue;
                }
                if (h[0] === 3 && (!e || h[1] > e[0] && h[1] < e[3])) {
                    r.label = h[1];
                    break;
                }
                if (h[0] === 6 && r.label < e[1]) {
                    r.label = e[1];
                    e = h;
                    break;
                }
                if (e && r.label < e[2]) {
                    r.label = e[2];
                    r.ops.push(h);
                    break;
                }
                if (e[2]) r.ops.pop();
                r.trys.pop();
                continue;
            }
            h = i.call(t, r);
        } catch (t) {
            h = [ 6, t ];
            s = 0;
        } finally {
            n = e = 0;
=======
                h = n.ops.pop();
                n.trys.pop();
                continue;

              default:
                if (!(s = n.trys, s = s.length > 0 && s[s.length - 1]) && (h[0] === 6 || h[0] === 2)) {
                    n = 0;
                    continue;
                }
                if (h[0] === 3 && (!s || h[1] > s[0] && h[1] < s[3])) {
                    n.label = h[1];
                    break;
                }
                if (h[0] === 6 && n.label < s[1]) {
                    n.label = s[1];
                    s = h;
                    break;
                }
                if (s && n.label < s[2]) {
                    n.label = s[2];
                    n.ops.push(h);
                    break;
                }
                if (s[2]) n.ops.pop();
                n.trys.pop();
                continue;
            }
            h = t.call(i, n);
        } catch (i) {
            h = [ 6, i ];
            e = 0;
        } finally {
            r = s = 0;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
        }
        if (h[0] & 5) throw h[1];
        return {
            value: h[0] ? h[1] : void 0,
            done: true
        };
    }
};

import SequentialContainer from "./Base";

import { ContainerIterator } from "../ContainerBase";

<<<<<<< HEAD
import { throwIteratorAccessError } from "../../utils/throwError";

var LinkListIterator = function(t) {
    __extends(LinkListIterator, t);
    function LinkListIterator(i, r, n) {
        var s = t.call(this, n) || this;
        s.o = i;
        s.h = r;
        if (s.iteratorType === 0) {
            s.pre = function() {
                if (this.o.W === this.h) {
                    throwIteratorAccessError();
                }
                this.o = this.o.W;
                return this;
            };
            s.next = function() {
                if (this.o === this.h) {
                    throwIteratorAccessError();
                }
                this.o = this.o.m;
                return this;
            };
        } else {
            s.pre = function() {
                if (this.o.m === this.h) {
                    throwIteratorAccessError();
                }
                this.o = this.o.m;
                return this;
            };
            s.next = function() {
                if (this.o === this.h) {
                    throwIteratorAccessError();
                }
                this.o = this.o.W;
                return this;
            };
        }
        return s;
    }
    Object.defineProperty(LinkListIterator.prototype, "pointer", {
        get: function() {
            if (this.o === this.h) {
                throwIteratorAccessError();
            }
            return this.o.H;
        },
        set: function(t) {
            if (this.o === this.h) {
                throwIteratorAccessError();
            }
            this.o.H = t;
=======
var LinkNode = function() {
    function LinkNode(i) {
        this.L = undefined;
        this.F = undefined;
        this.H = undefined;
        this.L = i;
    }
    return LinkNode;
}();

export { LinkNode };

var LinkListIterator = function(i) {
    __extends(LinkListIterator, i);
    function LinkListIterator(t, n, r) {
        var e = i.call(this, r) || this;
        e.D = t;
        e.J = n;
        if (e.iteratorType === 0) {
            e.pre = function() {
                if (this.D.F === this.J) {
                    throw new RangeError("LinkList iterator access denied!");
                }
                this.D = this.D.F;
                return this;
            };
            e.next = function() {
                if (this.D === this.J) {
                    throw new RangeError("LinkList iterator access denied!");
                }
                this.D = this.D.H;
                return this;
            };
        } else {
            e.pre = function() {
                if (this.D.H === this.J) {
                    throw new RangeError("LinkList iterator access denied!");
                }
                this.D = this.D.H;
                return this;
            };
            e.next = function() {
                if (this.D === this.J) {
                    throw new RangeError("LinkList iterator access denied!");
                }
                this.D = this.D.F;
                return this;
            };
        }
        return e;
    }
    Object.defineProperty(LinkListIterator.prototype, "pointer", {
        get: function() {
            if (this.D === this.J) {
                throw new RangeError("LinkList iterator access denied!");
            }
            return this.D.L;
        },
        set: function(i) {
            if (this.D === this.J) {
                throw new RangeError("LinkList iterator access denied!");
            }
            this.D.L = i;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
        },
        enumerable: false,
        configurable: true
    });
<<<<<<< HEAD
    LinkListIterator.prototype.copy = function() {
        return new LinkListIterator(this.o, this.h, this.iteratorType);
=======
    LinkListIterator.prototype.equals = function(i) {
        return this.D === i.D;
    };
    LinkListIterator.prototype.copy = function() {
        return new LinkListIterator(this.D, this.J, this.iteratorType);
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    };
    return LinkListIterator;
}(ContainerIterator);

<<<<<<< HEAD
var LinkList = function(t) {
    __extends(LinkList, t);
    function LinkList(i) {
        if (i === void 0) {
            i = [];
        }
        var r = t.call(this) || this;
        r.h = {};
        r.l = r.M = r.h.W = r.h.m = r.h;
        var n = r;
        i.forEach((function(t) {
            n.pushBack(t);
        }));
        return r;
    }
    LinkList.prototype.X = function(t) {
        var i = t.W, r = t.m;
        i.m = r;
        r.W = i;
        if (t === this.l) {
            this.l = r;
        }
        if (t === this.M) {
            this.M = i;
        }
        this.i -= 1;
    };
    LinkList.prototype.Y = function(t, i) {
        var r = i.m;
        var n = {
            H: t,
            W: i,
            m: r
        };
        i.m = n;
        r.W = n;
        if (i === this.h) {
            this.l = n;
        }
        if (r === this.h) {
            this.M = n;
        }
        this.i += 1;
    };
    LinkList.prototype.clear = function() {
        this.i = 0;
        this.l = this.M = this.h.W = this.h.m = this.h;
    };
    LinkList.prototype.begin = function() {
        return new LinkListIterator(this.l, this.h);
    };
    LinkList.prototype.end = function() {
        return new LinkListIterator(this.h, this.h);
    };
    LinkList.prototype.rBegin = function() {
        return new LinkListIterator(this.M, this.h, 1);
    };
    LinkList.prototype.rEnd = function() {
        return new LinkListIterator(this.h, this.h, 1);
    };
    LinkList.prototype.front = function() {
        return this.l.H;
    };
    LinkList.prototype.back = function() {
        return this.M.H;
    };
    LinkList.prototype.getElementByPos = function(t) {
        if (t < 0 || t > this.i - 1) {
            throw new RangeError;
        }
        var i = this.l;
        while (t--) {
            i = i.m;
        }
        return i.H;
    };
    LinkList.prototype.eraseElementByPos = function(t) {
        if (t < 0 || t > this.i - 1) {
            throw new RangeError;
        }
        var i = this.l;
        while (t--) {
            i = i.m;
        }
        this.X(i);
        return this.i;
    };
    LinkList.prototype.eraseElementByValue = function(t) {
        var i = this.l;
        while (i !== this.h) {
            if (i.H === t) {
                this.X(i);
            }
            i = i.m;
        }
        return this.i;
    };
    LinkList.prototype.eraseElementByIterator = function(t) {
        var i = t.o;
        if (i === this.h) {
            throwIteratorAccessError();
        }
        t = t.next();
        this.X(i);
        return t;
    };
    LinkList.prototype.pushBack = function(t) {
        this.Y(t, this.M);
        return this.i;
    };
    LinkList.prototype.popBack = function() {
        if (this.i === 0) return;
        var t = this.M.H;
        this.X(this.M);
        return t;
    };
    LinkList.prototype.pushFront = function(t) {
        this.Y(t, this.h);
        return this.i;
    };
    LinkList.prototype.popFront = function() {
        if (this.i === 0) return;
        var t = this.l.H;
        this.X(this.l);
        return t;
    };
    LinkList.prototype.setElementByPos = function(t, i) {
        if (t < 0 || t > this.i - 1) {
            throw new RangeError;
        }
        var r = this.l;
        while (t--) {
            r = r.m;
        }
        r.H = i;
    };
    LinkList.prototype.insert = function(t, i, r) {
        if (r === void 0) {
            r = 1;
        }
        if (t < 0 || t > this.i) {
            throw new RangeError;
        }
        if (r <= 0) return this.i;
        if (t === 0) {
            while (r--) this.pushFront(i);
        } else if (t === this.i) {
            while (r--) this.pushBack(i);
        } else {
            var n = this.l;
            for (var s = 1; s < t; ++s) {
                n = n.m;
            }
            var e = n.m;
            this.i += r;
            while (r--) {
                n.m = {
                    H: i,
                    W: n
                };
                n.m.W = n;
                n = n.m;
            }
            n.m = e;
            e.W = n;
        }
        return this.i;
    };
    LinkList.prototype.find = function(t) {
        var i = this.l;
        while (i !== this.h) {
            if (i.H === t) {
                return new LinkListIterator(i, this.h);
            }
            i = i.m;
=======
export { LinkListIterator };

var LinkList = function(i) {
    __extends(LinkList, i);
    function LinkList(t) {
        if (t === void 0) {
            t = [];
        }
        var n = i.call(this) || this;
        n.J = new LinkNode;
        n.K = undefined;
        n.U = undefined;
        t.forEach((function(i) {
            return n.pushBack(i);
        }));
        return n;
    }
    LinkList.prototype.clear = function() {
        this.o = 0;
        this.K = this.U = undefined;
        this.J.F = this.J.H = undefined;
    };
    LinkList.prototype.begin = function() {
        return new LinkListIterator(this.K || this.J, this.J);
    };
    LinkList.prototype.end = function() {
        return new LinkListIterator(this.J, this.J);
    };
    LinkList.prototype.rBegin = function() {
        return new LinkListIterator(this.U || this.J, this.J, 1);
    };
    LinkList.prototype.rEnd = function() {
        return new LinkListIterator(this.J, this.J, 1);
    };
    LinkList.prototype.front = function() {
        return this.K ? this.K.L : undefined;
    };
    LinkList.prototype.back = function() {
        return this.U ? this.U.L : undefined;
    };
    LinkList.prototype.forEach = function(i) {
        if (!this.o) return;
        var t = this.K;
        var n = 0;
        while (t !== this.J) {
            i(t.L, n++);
            t = t.H;
        }
    };
    LinkList.prototype.getElementByPos = function(i) {
        if (i < 0 || i > this.o - 1) {
            throw new RangeError;
        }
        var t = this.K;
        while (i--) {
            t = t.H;
        }
        return t.L;
    };
    LinkList.prototype.eraseElementByPos = function(i) {
        if (i < 0 || i > this.o - 1) {
            throw new RangeError;
        }
        if (i === 0) this.popFront(); else if (i === this.o - 1) this.popBack(); else {
            var t = this.K;
            while (i--) {
                t = t.H;
            }
            t = t;
            var n = t.F;
            var r = t.H;
            r.F = n;
            n.H = r;
            this.o -= 1;
        }
    };
    LinkList.prototype.eraseElementByValue = function(i) {
        while (this.K && this.K.L === i) this.popFront();
        while (this.U && this.U.L === i) this.popBack();
        if (!this.K) return;
        var t = this.K;
        while (t !== this.J) {
            if (t.L === i) {
                var n = t.F;
                var r = t.H;
                r.F = n;
                n.H = r;
                this.o -= 1;
            }
            t = t.H;
        }
    };
    LinkList.prototype.eraseElementByIterator = function(i) {
        var t = i.D;
        if (t === this.J) {
            throw new RangeError("Invalid iterator");
        }
        i = i.next();
        if (this.K === t) this.popFront(); else if (this.U === t) this.popBack(); else {
            var n = t.F;
            var r = t.H;
            r.F = n;
            n.H = r;
            this.o -= 1;
        }
        return i;
    };
    LinkList.prototype.pushBack = function(i) {
        this.o += 1;
        var t = new LinkNode(i);
        if (!this.U) {
            this.K = this.U = t;
            this.J.H = this.K;
            this.K.F = this.J;
        } else {
            this.U.H = t;
            t.F = this.U;
            this.U = t;
        }
        this.U.H = this.J;
        this.J.F = this.U;
    };
    LinkList.prototype.popBack = function() {
        if (!this.U) return;
        this.o -= 1;
        if (this.K === this.U) {
            this.K = this.U = undefined;
            this.J.H = undefined;
        } else {
            this.U = this.U.F;
            this.U.H = this.J;
        }
        this.J.F = this.U;
    };
    LinkList.prototype.setElementByPos = function(i, t) {
        if (i < 0 || i > this.o - 1) {
            throw new RangeError;
        }
        var n = this.K;
        while (i--) {
            n = n.H;
        }
        n.L = t;
    };
    LinkList.prototype.insert = function(i, t, n) {
        if (n === void 0) {
            n = 1;
        }
        if (i < 0 || i > this.o) {
            throw new RangeError;
        }
        if (n <= 0) return;
        if (i === 0) {
            while (n--) this.pushFront(t);
        } else if (i === this.o) {
            while (n--) this.pushBack(t);
        } else {
            var r = this.K;
            for (var e = 1; e < i; ++e) {
                r = r.H;
            }
            var s = r.H;
            this.o += n;
            while (n--) {
                r.H = new LinkNode(t);
                r.H.F = r;
                r = r.H;
            }
            r.H = s;
            s.F = r;
        }
    };
    LinkList.prototype.find = function(i) {
        if (!this.K) return this.end();
        var t = this.K;
        while (t !== this.J) {
            if (t.L === i) {
                return new LinkListIterator(t, this.J);
            }
            t = t.H;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
        }
        return this.end();
    };
    LinkList.prototype.reverse = function() {
<<<<<<< HEAD
        if (this.i <= 1) return;
        var t = this.l;
        var i = this.M;
        var r = 0;
        while (r << 1 < this.i) {
            var n = t.H;
            t.H = i.H;
            i.H = n;
            t = t.m;
            i = i.W;
            r += 1;
        }
    };
    LinkList.prototype.unique = function() {
        if (this.i <= 1) {
            return this.i;
        }
        var t = this.l;
        while (t !== this.h) {
            var i = t;
            while (i.m !== this.h && i.H === i.m.H) {
                i = i.m;
                this.i -= 1;
            }
            t.m = i.m;
            t.m.W = t;
            t = t.m;
        }
        return this.i;
    };
    LinkList.prototype.sort = function(t) {
        if (this.i <= 1) return;
        var i = [];
        this.forEach((function(t) {
            i.push(t);
        }));
        i.sort(t);
        var r = this.l;
        i.forEach((function(t) {
            r.H = t;
            r = r.m;
        }));
    };
    LinkList.prototype.merge = function(t) {
        var i = this;
        if (this.i === 0) {
            t.forEach((function(t) {
                i.pushBack(t);
            }));
        } else {
            var r = this.l;
            t.forEach((function(t) {
                while (r !== i.h && r.H <= t) {
                    r = r.m;
                }
                i.Y(t, r.W);
            }));
        }
        return this.i;
    };
    LinkList.prototype.forEach = function(t) {
        var i = this.l;
        var r = 0;
        while (i !== this.h) {
            t(i.H, r++, this);
            i = i.m;
        }
    };
    LinkList.prototype[Symbol.iterator] = function() {
        return function() {
            var t;
            return __generator(this, (function(i) {
                switch (i.label) {
                  case 0:
                    if (this.i === 0) return [ 2 ];
                    t = this.l;
                    i.label = 1;

                  case 1:
                    if (!(t !== this.h)) return [ 3, 3 ];
                    return [ 4, t.H ];

                  case 2:
                    i.sent();
                    t = t.m;
=======
        if (this.o <= 1) return;
        var i = this.K;
        var t = this.U;
        var n = 0;
        while (n << 1 < this.o) {
            var r = i.L;
            i.L = t.L;
            t.L = r;
            i = i.H;
            t = t.F;
            n += 1;
        }
    };
    LinkList.prototype.unique = function() {
        if (this.o <= 1) return;
        var i = this.K;
        while (i !== this.J) {
            var t = i;
            while (t.H && t.L === t.H.L) {
                t = t.H;
                this.o -= 1;
            }
            i.H = t.H;
            i.H.F = i;
            i = i.H;
        }
    };
    LinkList.prototype.sort = function(i) {
        if (this.o <= 1) return;
        var t = [];
        this.forEach((function(i) {
            return t.push(i);
        }));
        t.sort(i);
        var n = this.K;
        t.forEach((function(i) {
            n.L = i;
            n = n.H;
        }));
    };
    LinkList.prototype.pushFront = function(i) {
        this.o += 1;
        var t = new LinkNode(i);
        if (!this.K) {
            this.K = this.U = t;
            this.U.H = this.J;
            this.J.F = this.U;
        } else {
            t.H = this.K;
            this.K.F = t;
            this.K = t;
        }
        this.J.H = this.K;
        this.K.F = this.J;
    };
    LinkList.prototype.popFront = function() {
        if (!this.K) return;
        this.o -= 1;
        if (this.K === this.U) {
            this.K = this.U = undefined;
            this.J.F = this.U;
        } else {
            this.K = this.K.H;
            this.K.F = this.J;
        }
        this.J.H = this.K;
    };
    LinkList.prototype.merge = function(i) {
        var t = this;
        if (!this.K) {
            i.forEach((function(i) {
                return t.pushBack(i);
            }));
            return;
        }
        var n = this.K;
        i.forEach((function(i) {
            while (n && n !== t.J && n.L <= i) {
                n = n.H;
            }
            if (n === t.J) {
                t.pushBack(i);
                n = t.U;
            } else if (n === t.K) {
                t.pushFront(i);
                n = t.K;
            } else {
                t.o += 1;
                var r = n.F;
                r.H = new LinkNode(i);
                r.H.F = r;
                r.H.H = n;
                n.F = r.H;
            }
        }));
    };
    LinkList.prototype[Symbol.iterator] = function() {
        return function() {
            var i;
            return __generator(this, (function(t) {
                switch (t.label) {
                  case 0:
                    if (!this.K) return [ 2 ];
                    i = this.K;
                    t.label = 1;

                  case 1:
                    if (!(i !== this.J)) return [ 3, 3 ];
                    return [ 4, i.L ];

                  case 2:
                    t.sent();
                    i = i.H;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
                    return [ 3, 1 ];

                  case 3:
                    return [ 2 ];
                }
            }));
        }.bind(this)();
    };
    return LinkList;
}(SequentialContainer);

<<<<<<< HEAD
export default LinkList;
//# sourceMappingURL=LinkList.js.map
=======
export default LinkList;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
