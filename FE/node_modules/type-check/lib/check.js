<<<<<<< HEAD
// Generated by LiveScript 1.4.0
(function(){
  var ref$, any, all, isItNaN, types, defaultType, customTypes, toString$ = {}.toString;
=======
// Generated by LiveScript 1.6.0
(function(){
  var ref$, any, all, isItNaN, types, defaultType, toString$ = {}.toString;
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
  ref$ = require('prelude-ls'), any = ref$.any, all = ref$.all, isItNaN = ref$.isItNaN;
  types = {
    Number: {
      typeOf: 'Number',
      validate: function(it){
        return !isItNaN(it);
      }
    },
    NaN: {
      typeOf: 'Number',
      validate: isItNaN
    },
    Int: {
      typeOf: 'Number',
      validate: function(it){
        return !isItNaN(it) && it % 1 === 0;
      }
    },
    Float: {
      typeOf: 'Number',
      validate: function(it){
        return !isItNaN(it);
      }
    },
    Date: {
      typeOf: 'Date',
      validate: function(it){
        return !isItNaN(it.getTime());
      }
    }
  };
  defaultType = {
    array: 'Array',
    tuple: 'Array'
  };
<<<<<<< HEAD
  function checkArray(input, type){
    return all(function(it){
      return checkMultiple(it, type.of);
    }, input);
  }
  function checkTuple(input, type){
=======
  function checkArray(input, type, options){
    return all(function(it){
      return checkMultiple(it, type.of, options);
    }, input);
  }
  function checkTuple(input, type, options){
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    var i, i$, ref$, len$, types;
    i = 0;
    for (i$ = 0, len$ = (ref$ = type.of).length; i$ < len$; ++i$) {
      types = ref$[i$];
<<<<<<< HEAD
      if (!checkMultiple(input[i], types)) {
=======
      if (!checkMultiple(input[i], types, options)) {
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
        return false;
      }
      i++;
    }
    return input.length <= i;
  }
<<<<<<< HEAD
  function checkFields(input, type){
=======
  function checkFields(input, type, options){
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    var inputKeys, numInputKeys, k, numOfKeys, key, ref$, types;
    inputKeys = {};
    numInputKeys = 0;
    for (k in input) {
      inputKeys[k] = true;
      numInputKeys++;
    }
    numOfKeys = 0;
    for (key in ref$ = type.of) {
      types = ref$[key];
<<<<<<< HEAD
      if (!checkMultiple(input[key], types)) {
=======
      if (!checkMultiple(input[key], types, options)) {
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
        return false;
      }
      if (inputKeys[key]) {
        numOfKeys++;
      }
    }
    return type.subset || numInputKeys === numOfKeys;
  }
<<<<<<< HEAD
  function checkStructure(input, type){
=======
  function checkStructure(input, type, options){
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    if (!(input instanceof Object)) {
      return false;
    }
    switch (type.structure) {
    case 'fields':
<<<<<<< HEAD
      return checkFields(input, type);
    case 'array':
      return checkArray(input, type);
    case 'tuple':
      return checkTuple(input, type);
    }
  }
  function check(input, typeObj){
=======
      return checkFields(input, type, options);
    case 'array':
      return checkArray(input, type, options);
    case 'tuple':
      return checkTuple(input, type, options);
    }
  }
  function check(input, typeObj, options){
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    var type, structure, setting, that;
    type = typeObj.type, structure = typeObj.structure;
    if (type) {
      if (type === '*') {
        return true;
      }
<<<<<<< HEAD
      setting = customTypes[type] || types[type];
      if (setting) {
        return setting.typeOf === toString$.call(input).slice(8, -1) && setting.validate(input);
      } else {
        return type === toString$.call(input).slice(8, -1) && (!structure || checkStructure(input, typeObj));
=======
      setting = options.customTypes[type] || types[type];
      if (setting) {
        return (setting.typeOf === void 8 || setting.typeOf === toString$.call(input).slice(8, -1)) && setting.validate(input);
      } else {
        return type === toString$.call(input).slice(8, -1) && (!structure || checkStructure(input, typeObj, options));
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
      }
    } else if (structure) {
      if (that = defaultType[structure]) {
        if (that !== toString$.call(input).slice(8, -1)) {
          return false;
        }
      }
<<<<<<< HEAD
      return checkStructure(input, typeObj);
=======
      return checkStructure(input, typeObj, options);
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    } else {
      throw new Error("No type defined. Input: " + input + ".");
    }
  }
<<<<<<< HEAD
  function checkMultiple(input, types){
=======
  function checkMultiple(input, types, options){
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    if (toString$.call(types).slice(8, -1) !== 'Array') {
      throw new Error("Types must be in an array. Input: " + input + ".");
    }
    return any(function(it){
<<<<<<< HEAD
      return check(input, it);
=======
      return check(input, it, options);
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
    }, types);
  }
  module.exports = function(parsedType, input, options){
    options == null && (options = {});
<<<<<<< HEAD
    customTypes = options.customTypes || {};
    return checkMultiple(input, parsedType);
=======
    if (options.customTypes == null) {
      options.customTypes = {};
    }
    return checkMultiple(input, parsedType, options);
>>>>>>> 63b85f7d93ea628752d182d7c05714398f627e7a
  };
}).call(this);
